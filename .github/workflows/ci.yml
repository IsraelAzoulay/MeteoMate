# CI Pipeline Configuration
# This GitHub Actions workflow is responsible for Continuous Integration (CI) of the MeteoMate application.
# The CI pipeline ensures that the codebase remains in a deployable state by automating the build and test process.
# It performs the following steps:
# 1. Checkout the code.
# 2. Set up the Python environment.
# 3. Install necessary dependencies.
# 4. Scan the codebase for potential secrets.
# 5. Build a Docker image.
# 6. Run integration tests inside a Docker container.
# 7. Run unit tests inside a Docker container.
# 8. Push the Docker image to Docker Hub.

name: CI

on: [push] # Triggered on every push

jobs:
  build:
    # Use the latest version of the Ubuntu runner.
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Dependencies
      # Install necessary Python packages and tools.
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-mock detect-secrets

    - name: Scan Code for Secrets
      # Use detect-secrets tool to scan the codebase for potential secrets.
      run: |
        detect-secrets scan

    - name: Login to Docker Hub
      # Login to Docker Hub using provided secrets.
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build Docker Image
      # Build a Docker image with the given tag.
      uses: docker/build-push-action@v2
      with:
        context: .
        push: false
        tags: israelazoulay/weather-python-flask:dev

    - name: Run Integration Tests
      # Run the integration tests inside a Docker container.
      run: |
        docker run --name myapp-integration -e "ENVIRONMENT=TEST" -e "MONGODB_URI=${{ secrets.MONGODB_URI }}" -e "MONGODB_TESTS_URI=${{ secrets.MONGODB_TESTS_URI }}" -e "API_KEY=${{ secrets.API_KEY }}" israelazoulay/weather-python-flask:dev python -m unittest tests/integration_tests.py || true
        docker logs myapp-integration || true

    - name: Run Unit Tests
      # Run the unit tests inside a Docker container.
      run: |
        docker run --name myapp -e "ENVIRONMENT=TEST" -e "MONGODB_URI=${{ secrets.MONGODB_URI }}" -e "MONGODB_TESTS_URI=${{ secrets.MONGODB_TESTS_URI }}" -e "API_KEY=${{ secrets.API_KEY }}" israelazoulay/weather-python-flask:dev || true
        docker logs myapp || true

    - name: Push Docker Image
      # Push the built Docker image to Docker Hub.
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: israelazoulay/weather-python-flask:dev